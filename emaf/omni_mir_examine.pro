;+
; NAME:
;       OMNI_MIR_EXAMINE
;
; PURPOSE:
;       Creates image files of the mid-infrared data (generated by
;       omni_glimpse_emaf.pro) for each dust continuum source.  These
;       images are used to by-eye check for extraneous emission, bad
;       star-subtraction, etc. that may require an object to be
;       dismissed from consideration as an EMAF.
;
; CATEGORY:
;       distance-omnibus EMAF routine
;
; CALLING SEQUENCE:
;       OMNI_MIR_EXAMINE
;
; INPUTS:
;       NONE
;
; OPTIONAL INPUTS:
;       FN -- Filemame of the emaf IDL structure to use.  
;             [Default: ./local/{survey}_emaf.sav]
;       CONFFILE -- Name of the configuration file to use for survey
;                   information [Default: conffiles/survey_info.conf]
;
; KEYWORD PARAMETERS:
;       NONE
;
; OUTPUTS:
;       NONE
;
; OPTIONAL OUTPUTS:
;       NONE
;
; COMMON BLOCKS:
;       OMNI_CONFIG -- The set of configuration structures, read in
;                      from the config files in conffiles/
;
; MODIFICATION HISTORY:
;
;       Created:  01/11/12, TPEB -- Initial version.
;                                   (make_ubc_source_figs.pro)
;       Modified: 10/24/12, TPEB -- Finally codifying with a
;                                   documentation header, and moving
;                                   to omni_mir_examine.pro.
;       Modified: 12/13/12, TPEB -- Adjusted the location of the
;                                   colorbars to make them line up
;                                   with the plot windows.
;       Modified: 02/07/13, TPEB -- Made paper-friendly.
;       Modified: 03/14/13, TPEB -- Shifted to OMNI*.pro framework.
;       Modified: 03/20/13, TPEB -- Added CONFFILE optional input for
;                                   conformity with other routines.
;       Modified: 08/22/13, TPEB -- Corrected how we find the STARSUB
;                                   images to use the LOCAL-LAYOUT
;                                   config file.
;       Modified: 10/24/13, TPEB -- Added MIRMULT factor to adjust
;                                   SURVEY flux contours relative to
;                                   BGPS to panel (c) looks about
;                                   right.  Also, check for l=360 ->
;                                   l=0 conversion for loading correct
;                                   GLIMPSE mosaic and GLIMPSE
;                                   longitude plot ranges.
;       Modified: 12/19/13, TPEB -- Name change APERTURE_WTMASK ->
;                                   OMNI_APERTURE_MASK to align with the
;                                   rest of the code base, and
;                                   because I'm neurotic.  Also,
;                                   set aperture diameter based on
;                                   SURVEY solid angle.
;
;-

PRO OMNI_MIR_EXAMINE, fn, CONFFILE=cfile, TXTONLY=txtonly
  
  COMPILE_OPT IDL2, LOGICAL_PREDICATE
  
  COMMON OMNI_CONFIG, conf, mw, local, dpdfs, ancil, fmt, conffile
  
  ;; Parse input
  txtonly = KEYWORD_SET(txtonly)
  
  ;; Read in config files
  conf = omni_load_conf(cfile)
  IF ~exist(local) THEN $
     local = omni_read_conffile('./conffiles/local_layout.conf')
  IF local.error THEN BEGIN
     message,local.error,/cont
     RETURN
  ENDIF
  
  ;; Get the directory where the starsub images are stored
  readcol,local.glimpse,glimpse,format='a',count=n_gl,/SILENT,comment='#'
  GDIR = strmid(glimpse[0],0,strpos(glimpse[0],'/',/reverse_search)+1)
  
  ;;===============================================
  
  
  
  ;; Load in the SAVE files containing the EMAF structure & PF09
  ;;   catalog, plus read in the SURVEY catalog.
  IF n_elements(fn) EQ 0 THEN fn = './local/'+conf.survey+'_emaf.sav'
  restore,fn,/ver
  n = n_elements(emaf)
  restore,'./emaf/irdc_full_data.sav',/ver
  s   = omni_read_cat(conf.cat,ncat,fmt)
  fmt2 = string(ceil(alog10(ncat+1)),format="('I',I0)")
  sfwhm = string(conf.fwhm,format="(I0)") ; String for filenames
  print,'Number of EMAF sources: ',n
  
  
  ;; Create the TXT companion file on output -- used for marking
  ;;   whether to keep sources.  BAD sources go into the
  ;;   <SURVEY>_reject_emaf.txt file, which is read in by
  ;;   omni_generate_emaf.pro.
  openw,lun,'./local/'+conf.survey+'_examine_emaf.txt',/GET_LUN
  
  printf,lun,'CNUM  GLON  GLAT  VLSR  CONTRAST  SIG_C  IMIR  D_IMIR  SSUB  MORPH  BACKG'
  FOR i=0L,n-1 DO BEGIN
     r = emaf[i]
     printf,lun,string(r.cnum,r.l,r.b,r.vlsr,r.c,r.sig_c,r.i_mir,r.delta_imir,$
                       format=$
                       "(I0,'  ',F0.3,'  ',F0.3,'  ',F0.1,'  ',F0.3,'  ',"+$
                       "F0.3,'  ',F0.1,'  ',F0.1,'    ')")
  ENDFOR
  close,lun
  free_lun,lun
  
  IF txtonly THEN RETURN        ; Don't make plots
  
  ;;==================================================================
  ;; Generate the images as .EPS files in the directory ./local/output/
  
  ;; Plotting settings
  ellcol = 'Cyan'
  ellth  = 3
  legcolor = 'WT3'
  beamcol = 'Hot Pink'
  plotcs = 0.7
  
  ;; For efficiency, keep track of last GLIMPSE mosaic loaded -- only
  ;;   load mosaic if moving to new part of the sky.
  last_glon = ''
  FNBASE = local.emafpost+conf.survey+'_'
  
  ;; Loop over the EMAF sources
  FOR ll=0L, n-1 DO BEGIN
     
     ;; Print output for the user to keep tabs on the progress.
     cnum = string(emaf[ll].cnum,format=fmt)
     ;;IF (ll+1) MOD 10 EQ 0 THEN $
     message,'Plotting slides for '+conf.survey+' #'+cnum+'  ['+$
             string(ll+1,n,float(ll+1)/float(n)*100.,format=$
                    "(I4,' of ',I4,' (',F5.1,'%)]')"),/inf
     
     ;; Select the Bolocat structure index for this EMAF source
     i = WHERE(s.cnum EQ emaf[ll].cnum,ni)
     
     ;; Read in the processed GLIMPSE postage-stamp images
     smoo  = readfits(FNBASE+'s'+sfwhm+'arc'+cnum+'.fits',shdr,/sil)
     imir  = readfits(FNBASE+'Imir'+cnum+'.fits',ihdr,/sil)
     map   = readfits(FNBASE+'mapdat'+cnum+'.fits',bhdr,/sil)
     label = readfits(FNBASE+'label'+cnum+'.fits',lhdr,/sil)
     IF conf.hassmooth THEN $
        msmoo = readfits(FNBASE+'datsmo'+cnum+'.fits',bshdr,/sil) ELSE $
           msmoo = map
     
     
     ;; Read in full original GLIMPSE frame, if needed
     glon = string( round(s[i].glon / 3.) * 3., format="(I03)")
     IF glon EQ '360' THEN glon = '000' ; Check for G.C.
     IF glon NE last_glon THEN BEGIN
        last_glon = glon
        undefine,gimg
        gimg = readfits(GDIR+'starsub.'+glon+'00.I4.fits',ghdr)
        gsz  = size(gimg, /DIM)
     ENDIF
     
     
     ;; Select PF09 IRDCs within 4' of the location of peak
     ;;   millimeter flux density
     gcirc,2,s[i].glon,s[i].glat,pf_irdc.l,pf_irdc.b,dis
     jj = WHERE(dis LE 180., njj)
     print,string(njj,format="('# of IRDCs: ',I0)")
     
     
     ;; Prep plotting
     myps,'./local/output/'+conf.survey+'_mirexam'+cnum+'.eps',xsize=6.5,$
          ysize=5.65,/cmyk
     multiplot_xm, [2,2], ygap=0.02,xgap=0.042,/xmargin,mpcharsize=plotcs*0.7
     
     cgText,/norm,align=0.5,0.5,0.97,conf.survey+' #'+cnum,charsize=plotcs*1.2
     
     ;; Set the common GLIMPSE plot range & charsize
     pr = set_plot_range(alog(smoo))
     
     ;; Generate coordinate arrays for trimming -- SELECT=10
     plot_wcs_axes,shdr,10,LONARR=larr,LATARR=barr
     
     ;; Get scattering subtraction value from SHDR
     xscat = sxpar(shdr,'X_SCAT')
     
     ;; Make wtmask
     undefine,wtmask
     ap_size = double(ceil(sqrt(conf.omega/!dpi)*2.*206265.))
     wtmask  = omni_aperture_mask(shdr, ap_size, s[i].glon, s[i].glat)
     
     ;;=============================================
     ;; Plot (a) -- Original GLIMPSE image
     
     plot_wcs_axes,ghdr,10,LONARR=glarr,LATARR=gbarr
     gcadjust = abs(min(glarr)-min(larr)) LE 300 ? 0. : -360. ; Deal w/ GC
     print,'Range values (G/S): ',min(glarr),min(larr)+gcadjust
     plotmap,gimg-xscat,ghdr,charsize=plotcs,ct=0,range=pr,/log,$
             xrange=maxmin(larr)+gcadjust,yrange=minmax(barr)
     plot_wcs_axes,shdr,10,XC=xc,YC=yc
     
     ;; Mark the locations of PF09 IRDCs
     FOR k=0L, njj-1 DO BEGIN
        j = jj[k]
        tvellipse,pf_irdc[j].min/3600.,pf_irdc[j].maj/3600.,$
                  pf_irdc[j].l,pf_irdc[j].b,$
                  -pf_irdc[j].pa_irdc,/data,thick=ellth,color=cgColor(ellcol)
     ENDFOR
     
     ;; Mark the location of the 40" MAP aperture around
     ;;   location of peak flux density
     cgContour,wtmask,xc,yc,levels=[0.5],thick=4,color=beamcol,/over
     
     al_legend,/top,/right,['(a)'],textcolor='Black',charsize=1.2*plotcs,box=0
     
     multiplot
     
     ;;=============================================
     ;; Plot (b) -- MAP Image w/ Label Contour
     
     undefine,bpr
     plotmap,map,bhdr,charsize=plotcs,ct=3,range=bpr,/log,min_dpi=100,$
             XC=bxc,YC=byc,axcolor='WT3' ;,/reverse
     cgContour,label,bxc,byc,levels=[0.5],thick=5,color='light cyan',/over,$
               label=0
     
     ;; Mark the location of the 40" MAP aperture around
     ;;   location of peak flux density
     cgContour,wtmask,xc,yc,levels=[0.5],thick=4,color=beamcol,/over
     
     al_legend,/top,/right,['(b)'],textcolor=legcolor,charsize=1.2*plotcs,box=0
     
     bywin = !y.window
     
     cgText,charsize=0.7,/normal,0.8,0.98,align=0.5,$
            'LABVAL = '+string(sxpar(lhdr,'LABVAL'),format="(I0)")
     
     multiplot
     
     ;;=============================================
     ;; Plot (c) -- Smoothed w/ MAP flux contours
     
     plotmap,smoo,shdr,charsize=plotcs,ct=0,range=pr,/log,min_dpi=100
     
     ;; Mark the location of the 40" MAP aperture around
     ;;   location of peak flux density
     cgContour,wtmask,xc,yc,levels=[0.5],thick=4,color=beamcol,/over
     
     ;; Plot the logarithmic MAP flux contours
     cgLoadct,40,/silent
     levels = [.025,.05,0.1,0.25,0.5] * conf.mirmult
     cgContour,msmoo,bxc,byc,levels=levels,/overplot,thick=2,$
               c_colors=[1,2,3,4,5]*50,c_charsize=0.7*plotcs
     cgLoadct,0,/silent
     
     al_legend,/top,/right,['(c)'],textcolor='Black',charsize=1.2*plotcs,box=0
     
     gywin = !y.window
     
     multiplot
     
     ;;=============================================
     ;; Plot (d) -- I_MIR
     
     plotmap,imir,ihdr,charsize=plotcs,ct=0,range=pr,/log
     
     ;; Mark the location of the 4' I_MIR aperture around
     ;;   location of peak flux density
     undefine,wtmask
     wtmask  = omni_aperture_mask(ihdr, 240., s[i].glon, s[i].glat)
     cgContour,wtmask,xc,yc,levels=[0.5],thick=4,color=ellcol,/over,label=0
     
     levels=indgen( fix(round(exp(pr[1])-exp(pr[0]))) ) + fix(exp(pr[0]))
     print,'Levels: ',m4_stat(levels)
     cgContour,imir,xc,yc,levels=levels,thick=2,color='Black',/over,$
               charsize=plotcs,label=2,/downhill
     
     al_legend,/top,/right,['(d)'],textcolor='Black',charsize=1.2*plotcs,box=0
     
     
     ;;=============================================
     ;; Plot Colorbars
     cgLoadct,0,/silent
     cgcolorbar,/vertical,/right,position=[0.905,gywin[0],0.925,gywin[1]],$
                format="(F0.1)",title='GLIMPSE Intensity  [MJy sr!u-1!n]',$
                charsize=plotcs,range=exp(pr),/ylog,divisions=6,yminor=2
     
     cgLoadct,3,/silent
     cgcolorbar,range=exp(bpr),position=[0.905,bywin[0],0.925,bywin[1]],$
                format="(F0.3)",title='MAP Flux Density  [Jy beam!u-1!n]',$
                charsize=plotcs,/vertical,/right,/ylog
     
     
     myps,/done,/mp
     
     ;; Clean up memory from loop
     undefine,wtmask,orig,smoo,imir
     
  ENDFOR
  
  RETURN
END
